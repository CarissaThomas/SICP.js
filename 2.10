
//2.9
//The width of interval: half the difference of the lower and upper bounds 
//The width of the result combining two intervals is a function only of the widths of the argument intervals 
//Show that the width of the sum of 2 intervals is a function only of the widths of the intervals being added

//add two intervals 
//get the width of combined intervals 
//demonstrate that the width of the indivdual intervals effects the combined result of the combined interval 



function upper_bound(interval){
  return Math.max(interval);
}

function lower_bound(interval){
  return Math.min(interval);
}

function width_interval(x) {
    return (upper_bound(x) - lower_bound(x)) * .5;
}

function add_interval(x,y) {
   return make_interval(lower_bound(x) + lower_bound(y),
                        upper_bound(x) + upper_bound(y));
}

function sub_interval(x,y) {
   return make_interval(lower_bound(x) - upper_bound(y),
                        lower_bound(x) - upper_bound(y));
}

function div_interval(x,y) {
  if(y === 0){
    console.log('cannot divide interval by 0');
    break;
  } else {
    mult_interval(x, (make_interval(1.0 / upper-bound(y), 1.0 / lower-bound(y)) ));
  }
   return make_interval(lower_bound(x)/upper_bound(y),
                        lower_bound(x)/upper_bound(y));
}

function mult_interval(x,y) {//intervals the same width, mult is then different 
   return make_interval(lower_bound(x) * upper_bound(y)
                        lower_bound(x) * upper_bound(y));
}

function make_interval(a,b) {
   return pair(a,b);
}

function multDivisionCheck(a,b){
  if(a !== b){
    console.log('two intervals are not a function only of the widths of the intervals being divided/multiplied');
  }
}

multDivisionCheck(a,b);
var a = width_interval(mult_interval(make_interval(0,10),make_interval(0,2)));
var b = width_interval(mult_interval(make_interval(-5,5),make_interval(-1,1)));

